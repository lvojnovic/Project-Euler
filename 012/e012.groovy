/*
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Solution:
http://en.wikipedia.org/wiki/Divisor_function
*/
import java.lang.Math

def isPrime = { Integer n ->
    if (n == 1) {
        return false
    } else if (n < 4) { //2, 3
        return true
    } else if (n % 2 == 0) { //4,6,8
        return false
    } else if (n < 9) {//5,7
        return true
    } else if (n % 3 == 0) {//9
        return false
    } else {
        Integer root = Math.sqrt(n)
        //every prime > 3 is of form 6*n-1 or 6*n+1
        
        def p = 5
        while (p <= root) {
            if (n%p == 0) {
                return false
            }
            if (n%(p+2) == 0) {
                return false
            }
            p+=6
        }
    }
    true
}

def primesList = { Integer size ->
    def prime = 2
    def count = 0
    def primeNumbers = []
    while (count < size) {
        if (isPrime(prime)) {
            primeNumbers.push(prime)
            count++
        }
        prime++
    }
    primeNumbers
}

def divisorCount = { List primeNumbers, Integer n ->
    def count = 1
    def iterator = 0
    Integer number = n
    while (iterator< primeNumbers.size()) {
        if (primeNumbers[iterator]*primeNumbers[iterator] > number) {
            count*=2
            break
        }
    
        if (number%primeNumbers[iterator]==0) {
            def exponent = 1
            number/=primeNumbers[iterator]
            while (number%primeNumbers[iterator] == 0) {
                number/=primeNumbers[iterator]
                exponent++
            }
            count*=(exponent+1)
        }
        if (number == 1) break
        
        iterator++
    }
    count
}

def start = System.nanoTime()
def currentTriangle = 3
def currentNatural = 2
def primeNumbers = primesList(500)
while(divisorCount(primeNumbers, currentTriangle) <= 500) {
    currentNatural++
    currentTriangle+=currentNatural
}

def stop = System.nanoTime()
println "Result: " + currentTriangle
println primeNumbers[primeNumbers.size()-1]
println "Time taken: " + (stop - start)/1e9